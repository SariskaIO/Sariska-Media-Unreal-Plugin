<?xml version="1.0" encoding="utf-8"?>
<!--Android Camera plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
    <buildGradleAdditions>
        <insert>
            repositories {
                mavenCentral()
                maven {
                           url = "https://maven.pkg.github.com/SariskaIO/maven-repository"
                           credentials {
                               username = "SariskaIO"
                               password = "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"
                           }
                       }
            }
            
            android {
                        compileOptions {
                                sourceCompatibility 1.8
                                targetCompatibility 1.8
                        }
            }
            dependencies {
                implementation 'io.sariska:sariska-media-transport:5.2.1-exp'
            }
            
        </insert>
    </buildGradleAdditions>
    <!-- init section is always evaluated once per architecture -->
    <init>
        <log text="AndroidCamera init"/>
    </init>
    
    
    <androidManifestUpdates>
        <addPermission android:name="android.permission.CAMERA"/>
        <addFeature android:name="android.hardware.camera"/>
        <addFeature android:name="android.hardware.camera.front" android:required="false"/>
        <addFeature android:name="android.hardware.camera.autofocus"/>
        <addPermission android:name="android.permission.INTERNET" />
        <addPermission android:name="android.permission.ACCESS_NETWORK_STATE" />
        <addPermission android:name="android.permission.BLUETOOTH" />
        <addPermission android:name="android.permission.CAMERA" />
        <addPermission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
        <addPermission android:name="android.permission.RECORD_AUDIO" />
        <addPermission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
        <addPermission android:name="android.permission.WAKE_LOCK" />
        
        <addElements tag="application">
            <provider
                    android:name="com.facebook.react.modules.blob.BlobProvider"
                    android:authorities="@stringsariska/blob_provider_authority"
                    android:exported="false"
                    />
        </addElements>
    </androidManifestUpdates>

<!--    <gradleProperties>-->
<!--        <insert>-->
<!--            android.useAndroidX=true-->
<!--            android.enableJetifier=true-->
<!--        </insert>-->
<!--    </gradleProperties>-->
    
    <resourceCopies>
                  <copyFile src="$S(ProjectDir)/Plugins/Sariska-Media-Unreal-Plugin/Source/WebCameraFeed/stringsariskas.xml"
                            dst="$S(BuildDir)/res/values/stringsariskas.xml" />
    </resourceCopies>
    
    <!-- optional additions to the GameActivity imports in GameActivity.java -->
    <gameActivityImportAdditions>
        <insert>

import android.os.Build;
import java.lang.reflect.Method;
import android.widget.Toast;
import android.graphics.SurfaceTexture;
import android.graphics.ImageFormat;
import android.graphics.PixelFormat;
import java.util.List;
import java.io.IOException;
import android.util.Log;
import android.Manifest;
import android.support.annotation.NonNull;
import android.graphics.PointF;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

// Added Imports

import android.app.Application;
import io.sariska.sdk.Connection;
import io.sariska.sdk.Conference;
import io.sariska.sdk.JitsiRemoteTrack;
import io.sariska.sdk.SariskaMediaTransport;
import io.sariska.sdk.JitsiLocalTrack;
import com.oney.WebRTCModule.WebRTCView;

import static android.opengl.GLES20.GL_RGBA;
import static android.opengl.GLES20.GL_TEXTURE_2D;
import static android.opengl.GLES20.GL_UNSIGNED_BYTE;
import static com.facebook.react.bridge.UiThreadUtil.runOnUiThread;
import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.opengl.EGL14;
import android.opengl.EGLConfig;
import android.opengl.EGLContext;
import android.opengl.EGLDisplay;
import android.opengl.EGLSurface;
import android.opengl.GLES11Ext;
import android.opengl.GLES20;
import android.opengl.GLUtils;
import android.os.Build;
import android.os.Bundle;
import android.renderscript.Allocation;
import android.renderscript.Element;
import android.renderscript.RenderScript;
import android.renderscript.ScriptIntrinsicYuvToRGB;
import android.renderscript.Type;
import androidx.annotation.RequiresApi;
import androidx.core.app.ActivityCompat;
import com.oney.WebRTCModule.WebRTCView;
import org.webrtc.GlUtil;
import org.webrtc.VideoFrame;
import org.webrtc.VideoSink;
import org.webrtc.VideoTrack;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import io.sariska.sdk.Connection;
import io.sariska.sdk.Conference;
import io.sariska.sdk.JitsiLocalTrack;
import io.sariska.sdk.JitsiRemoteTrack;
import io.sariska.sdk.SariskaMediaTransport;

        </insert>
    </gameActivityImportAdditions>
    
    <gameActivityClassAdditions>
        <insert>
            
            private int textureIDSariska;
            private Conference conference;
            private Connection connection;
            private WebRTCView remoteView;
            private WebRTCView localView;
            private List&lt;JitsiLocalTrack&gt; localTracks;
            private boolean weHaveLocalTracks = false;
            private final ExecutorService mRenderThreadLocal = Executors.newSingleThreadExecutor();
            private final ExecutorService mRenderThreadRemote = Executors.newFixedThreadPool(2);
            private volatile EGLContext mSharedEglContext;
            private volatile EGLConfig mSharedEglConfig;
            private int mTextureID;
            private int mRemoteTextureId;
            private int mTextureWidth;
            private int mTextureHeight;
            private String token;
            private String roomName;
            private static final String TAG = "JavaPlugin";
        
            private VideoTrack localVideoTrack;
            private VideoTrack remoteVideoTrack;
            private Context context;
            
            String[] PERMISSIONS = {
                        android.Manifest.permission.CAMERA,
                        android.Manifest.permission.RECORD_AUDIO
                };
            
            int PERMISSION_ALL = 1;
                
            
            public void setupLocalStream() {
                       Bundle options = new Bundle();
                       options.putBoolean("audio", true);
                       options.putBoolean("video", true);
                       options.putInt("resolution", 360);  // 180, 240, 360, 720, 1080
                       SariskaMediaTransport.createLocalTracks(options, tracks ->{
                       _activity.runOnUiThread(() -> {
                           System.out.println("Where are we 1");
                           localTracks = tracks;
                           System.out.println("Where are we 2");
                           for (JitsiLocalTrack track: localTracks){
                               System.out.println("Where are we 3");
                               if(track.getType().equals("video")){
                                   WebRTCView view = track.render();
                                   view.setMirror(true);
                                   localVideoTrack = view.getVideoTrackForStreamURL(track.getStreamURL());
                                   localVideoTrack.setEnabled(true);
                                   localVideoTrack.addSink(new VideoSink() {
                                       @RequiresApi(api = Build.VERSION_CODES.O)
                                       @Override
                                       public void onFrame(VideoFrame videoFrame) {
                                       VideoFrame.I420Buffer i420Buffer = videoFrame.getBuffer().toI420();
                                       final int width = i420Buffer.getWidth();
                                       final int height = i420Buffer.getHeight();
                                       byte[] nv21Data = createNV21Data(i420Buffer);
                                       nativeGetFrameData(width, height, nv21Data);
                                       }
                                   });
                               }
                           }
                       });});}
                
                public boolean hasPermissions(GameActivity context, String... permissions) {
                            for (String permission : permissions) {
                                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {
                                    return false;
                                }
                            }
                        return true;
                }
                
                public void createConference() {
               
                    conference = connection.initJitsiConference();
                    conference.addEventListener("CONFERENCE_JOINED", () -> {
                        for (JitsiLocalTrack track : localTracks) {
                            conference.addTrack(track);
                        }
                    });
                
                    conference.addEventListener("DOMINANT_SPEAKER_CHANGED", p -> {
                        String id = (String) p;
                        conference.selectParticipant(id);
                    });
                                
                    conference.addEventListener("CONFERENCE_LEFT", () -> {});

                    conference.addEventListener("TRACK_ADDED", p -> {
                        
                        JitsiRemoteTrack track = (JitsiRemoteTrack) p;
                        if(track.getStreamURL().equals(localTracks.get(1).getStreamURL())){
                            //So as to not add local track in remote container
                            return;
                        }
                        //nativeGetSetGo();
                        _activity.runOnUiThread(() -> {
                        if (track.getType().equals("video")) {
                        WebRTCView view = track.render();
                        view.setMirror(true);
                        remoteVideoTrack = view.getVideoTrackForStreamURL(track.getStreamURL());
                        remoteVideoTrack.setEnabled(true);
                        remoteVideoTrack.addSink(new VideoSink() {
                            @RequiresApi(api = Build.VERSION_CODES.O)
                            @Override
                            public void onFrame(VideoFrame videoFrame) {
                            VideoFrame.I420Buffer i420Buffer = videoFrame.getBuffer().toI420();
                            final int width = i420Buffer.getWidth();
                            final int height = i420Buffer.getHeight();
                            byte[] nv21Data = createNV21Data(i420Buffer);
                            nativeGetFrameDataRemote(width, height, nv21Data);
                            System.out.println("Where are we 9");
                            }
                        });
                        }
                    });
                });

                    conference.addEventListener("TRACK_REMOVED", p -> {
                        JitsiRemoteTrack track = (JitsiRemoteTrack) p;
                        runOnUiThread(() -> {
                            //
                        });
                    });
                                
                                conference.join();
                                System.out.println("We are past createConference");
                    }

                    
                   
                           private byte[] createNV21Data(VideoFrame.I420Buffer i420Buffer) {
                                   final int width = i420Buffer.getWidth();
                                   final int height = i420Buffer.getHeight();
                                   final int chromaStride = width;
                                   final int chromaWidth = (width + 1) / 2;
                                   final int chromaHeight = (height + 1) / 2;
                                   final int ySize = width * height;
                                   final ByteBuffer nv21Buffer = ByteBuffer.allocateDirect(ySize + chromaStride * chromaHeight);
                                   // We don't care what the array offset is since we only want an array that is direct.
                                   @SuppressWarnings("ByteBufferBackingArray")
                                   final byte[] nv21Data = nv21Buffer.array();
                                   for (int y = 0; y &lt; height; ++y) {
                                       for (int x = 0; x &lt; width; ++x) {
                                           final byte yValue = i420Buffer.getDataY().get(y * i420Buffer.getStrideY() + x);
                                           nv21Data[y * width + x] = yValue;
                                       }
                                   }

                                   for (int y = 0; y &lt; chromaHeight; ++y) {
                                       for (int x = 0; x &lt; chromaWidth; ++x) {
                                           final byte uValue = i420Buffer.getDataU().get(y * i420Buffer.getStrideU() + x);
                                           final byte vValue = i420Buffer.getDataV().get(y * i420Buffer.getStrideV() + x);
                                           nv21Data[ySize + y * chromaStride + 2 * x + 0] = vValue;
                                           nv21Data[ySize + y * chromaStride + 2 * x + 1] = uValue;
                                       }
                                   }
                                   return nv21Data;
                               }

    public native boolean nativeGetFrameData(int frameWidth, int frameHeight, byte[] data);
    //public native boolean nativeGetSetGo();
    public native boolean nativeGetFrameDataRemote(int frameWidth, int frameHeight, byte[] data);


    public boolean isCameraPermissionGranted() {
        return true;
    }


    public void AndroidThunkJava_Toast() {
        //Do nothing
    }

    public void AndroidThunkJava_setDeviceID(int _deviceId) {
        //Do nothing
    }

    public boolean AndroidThunkJava_startCamera(int w, int h, int _targetFps, int _texID) {
        return false;
    }

    public void AndroidThunkJava_stopCamera() {
       //do nothing
    }

    public int AndroidThunkJava_getCameraFacing(int facing) {
      return 1;
    }

    public int AndroidThunkJava_getNumCameras() {
      return 1;
    }

    public int AndroidThunkJava_getFacingOfCamera(int _deviceID) {
       return 1;
    }

    public int AndroidThunkJava_getWidth() {
        return 1;
    }

    public int AndroidThunkJava_getHeight() {
        return 1;
    }
        </insert>
    </gameActivityClassAdditions>

    <!-- optional additions to GameActivity onCreate in GameActivity.java -->
    <gameActivityOnCreateAdditions>
        <insert>
            
            if (!hasPermissions(this, PERMISSIONS)) {
                        ActivityCompat.requestPermissions(this, PERMISSIONS, PERMISSION_ALL);
            }
            
            SariskaMediaTransport.initializeSdk(_activity.getApplication());
            System.out.println("Sariska Initialized");
            this.setupLocalStream();
            String token = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjNmYjc1MTJjZjgzYzdkYTRjMjM0Y2QzYWEyYWViOTUzMGNlZmUwMDg1YzRiZjljYzgwY2U5YmQ5YmRiNjA3ZjciLCJ0eXAiOiJKV1QifQ.eyJjb250ZXh0Ijp7InVzZXIiOnsiaWQiOiJ6bmJ4M3Y1aCIsImF2YXRhciI6IiNFMDNEQTAiLCJuYW1lIjoidW5yZWFsRCJ9LCJncm91cCI6IjEifSwic3ViIjoidWF0bmNvZTV2NzJsbm9obG53Z3F2OCIsInJvb20iOiIqIiwiaWF0IjoxNjU1MDMxNTg1LCJuYmYiOjE2NTUwMzE1ODUsImlzcyI6InNhcmlza2EiLCJhdWQiOiJtZWRpYV9tZXNzYWdpbmdfY28tYnJvd3NpbmciLCJleHAiOjE2NTUyMDQzODV9.OoqZc3PKER3M7kOMuzJT7LYvUSYcGaYV5tR1rhChGPJ5fIS47Mpf-j09u9jI69-hl45hTzQS1xvWAnwqvopTgTJ35yulI2rYye0zGTed51ljHw4R7BVlhymvNOMW6mq6klBsRsmZgqLnEQIWPdC7Gdy2rYMs_daGYNI6POqUte3HoeTGwAwr_IIDe3jnzoA2LZ7bJ_59dGaUAjBjscyNW9IGwHNXnChEpDXKw0ocKp8hwUTKuLb2F-76auzzr5aQ_HBtj0-eMfeXt3TVINtLFDwZeW8sFIRCYqqyNimaHyMqDyi7vdYjb7oz_uaYAwVvjDRc2X8ieyDnw598-I3gZA";
            
            connection = SariskaMediaTransport.JitsiConnection(token, "dipak", false);
            
            connection.addEventListener("CONNECTION_ESTABLISHED", this::createConference);
            
            connection.addEventListener("CONNECTION_FAILED", () -> {});
            
            connection.addEventListener("CONNECTION_DISCONNECTED", () -> {});
            
            connection.connect();

            
        </insert>
    </gameActivityOnCreateAdditions>


</root>
